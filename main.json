{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "frontDoorName": {
      "type": "string",
      "defaultValue": "[format('afd{0}', uniqueString(resourceGroup().id))]"
    },
    "allowedCountryCodes": {
      "type": "array",
      "defaultValue": [
        "AU",
        "NZ",
        "ZZ"
      ]
    }
  },
  "functions": [],
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "functionapp",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "functionRuntime": {
              "type": "string",
              "defaultValue": "dotnet"
            },
            "appNamePrefix": {
              "type": "string",
              "defaultValue": "[uniqueString(resourceGroup().id)]"
            }
          },
          "functions": [],
          "variables": {
            "functionAppName": "[format('fn-{0}', parameters('appNamePrefix'))]",
            "appServicePlanName": "FunctionPlan",
            "appInsightsName": "AppInsights",
            "storageAccountName": "[format('stor{0}', replace(parameters('appNamePrefix'), '-', ''))]",
            "functionNameComputed": "MyHttpTriggeredFunction"
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2019-06-01",
              "name": "[variables('storageAccountName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
              },
              "kind": "StorageV2",
              "properties": {
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                  "services": {
                    "file": {
                      "keyType": "Account",
                      "enabled": true
                    },
                    "blob": {
                      "keyType": "Account",
                      "enabled": true
                    }
                  },
                  "keySource": "Microsoft.Storage"
                },
                "accessTier": "Hot"
              }
            },
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2018-05-01-preview",
              "name": "[variables('appInsightsName')]",
              "location": "[parameters('location')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "publicNetworkAccessForIngestion": "Enabled",
                "publicNetworkAccessForQuery": "Enabled"
              }
            },
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2020-06-01",
              "name": "[variables('appServicePlanName')]",
              "location": "[parameters('location')]",
              "kind": "functionapp",
              "sku": {
                "name": "Y1"
              },
              "properties": {}
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2020-06-01",
              "name": "[variables('functionAppName')]",
              "location": "[parameters('location')]",
              "kind": "functionapp",
              "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
                "siteConfig": {
                  "appSettings": [
                    {
                      "name": "AzureWebJobsStorage",
                      "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]"
                    },
                    {
                      "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                      "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]"
                    },
                    {
                      "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                      "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName'))).InstrumentationKey]"
                    },
                    {
                      "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                      "value": "[format('InstrumentationKey={0}', reference(resourceId('Microsoft.Insights/components', variables('appInsightsName'))).InstrumentationKey)]"
                    },
                    {
                      "name": "FUNCTIONS_WORKER_RUNTIME",
                      "value": "[parameters('functionRuntime')]"
                    },
                    {
                      "name": "FUNCTIONS_EXTENSION_VERSION",
                      "value": "~3"
                    },
                    {
                      "name": "AzureWebJobsDisableHomepage",
                      "value": "true"
                    }
                  ]
                },
                "httpsOnly": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
                "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/sites/functions",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', variables('functionAppName'), variables('functionNameComputed'))]",
              "properties": {
                "config": {
                  "disabled": false,
                  "bindings": [
                    {
                      "name": "req",
                      "type": "httpTrigger",
                      "direction": "in",
                      "authLevel": "function",
                      "methods": [
                        "get"
                      ]
                    },
                    {
                      "name": "$return",
                      "type": "http",
                      "direction": "out"
                    }
                  ]
                },
                "files": {
                  "run.csx": "#r \"Newtonsoft.Json\"\n\nusing System.Net;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Primitives;\nusing Newtonsoft.Json;\n\npublic static async Task<IActionResult> Run(HttpRequest req, ILogger log)\n{\n    log.LogInformation(\"C# HTTP trigger function processed a request.\");\n\n    string name = req.Query[\"name\"];\n\n    string requestBody = await new StreamReader(req.Body).ReadToEndAsync();\n    dynamic data = JsonConvert.DeserializeObject(requestBody);\n    name = name ?? data?.name;\n\n    string responseMessage = string.IsNullOrEmpty(name)\n        ? \"This HTTP triggered function executed successfully. Pass a name in the query string or in the request body for a personalized response.\"\n                : $\"Hello, {name}. This HTTP triggered function executed successfully.\";\n\n            return new OkObjectResult(responseMessage);\n}\n"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
              ]
            }
          ],
          "outputs": {
            "functionAppHostName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', variables('functionAppName'))).defaultHostName]"
            },
            "functionAppKey": {
              "type": "string",
              "value": "[listKeys(format('{0}/host/default', resourceId('Microsoft.Web/sites', variables('functionAppName'))), '2020-06-01').functionKeys.default]"
            },
            "functionName": {
              "type": "string",
              "value": "[variables('functionNameComputed')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "front-door",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "frontDoorName": {
            "value": "[parameters('frontDoorName')]"
          },
          "backendAddress": {
            "value": "[reference(extensionResourceId(resourceGroup().id, 'Microsoft.Resources/deployments', 'functionapp'), '2019-10-01').outputs.functionAppHostName.value]"
          },
          "functionKey": {
            "value": "[reference(extensionResourceId(resourceGroup().id, 'Microsoft.Resources/deployments', 'functionapp'), '2019-10-01').outputs.functionAppKey.value]"
          },
          "allowedCountryCodes": {
            "value": "[parameters('allowedCountryCodes')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "frontDoorName": {
              "type": "string"
            },
            "backendAddress": {
              "type": "string"
            },
            "functionKey": {
              "type": "string"
            },
            "allowedCountryCodes": {
              "type": "array"
            },
            "blockResponseCode": {
              "type": "int",
              "defaultValue": 403
            }
          },
          "functions": [],
          "variables": {
            "rulesEngineName": "AddFunctionKey",
            "wafPolicyName": "MyWafPolicy"
          },
          "resources": [
            {
              "type": "Microsoft.Network/FrontDoorWebApplicationFirewallPolicies",
              "apiVersion": "2020-04-01",
              "name": "[variables('wafPolicyName')]",
              "location": "global",
              "properties": {
                "policySettings": {
                  "mode": "Prevention",
                  "customBlockResponseStatusCode": "[parameters('blockResponseCode')]"
                },
                "customRules": {
                  "rules": [
                    {
                      "name": "GeoBlock",
                      "priority": 10,
                      "ruleType": "MatchRule",
                      "action": "Block",
                      "matchConditions": [
                        {
                          "matchVariable": "RemoteAddr",
                          "operator": "GeoMatch",
                          "negateCondition": true,
                          "matchValue": "[parameters('allowedCountryCodes')]"
                        }
                      ]
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Network/frontDoors/rulesEngines",
              "apiVersion": "2020-05-01",
              "name": "[format('{0}/{1}', parameters('frontDoorName'), variables('rulesEngineName'))]",
              "properties": {
                "rules": [
                  {
                    "name": "AddFunctionKey",
                    "priority": 1,
                    "matchConditions": [],
                    "action": {
                      "requestHeaderActions": [
                        {
                          "headerActionType": "Append",
                          "headerName": "x-functions-key",
                          "value": "[parameters('functionKey')]"
                        }
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[extensionResourceId(resourceGroup().id, 'Microsoft.Resources/deployments', 'front-door-deployment-1')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "front-door-deployment-1",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "frontDoorName": {
                    "value": "[parameters('frontDoorName')]"
                  },
                  "backendAddress": {
                    "value": "[parameters('backendAddress')]"
                  },
                  "wafPolicyId": {
                    "value": "[resourceId('Microsoft.Network/FrontDoorWebApplicationFirewallPolicies', variables('wafPolicyName'))]"
                  },
                  "rulesEngineId": {
                    "value": ""
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "frontDoorName": {
                      "type": "string"
                    },
                    "backendAddress": {
                      "type": "string"
                    },
                    "wafPolicyId": {
                      "type": "string"
                    },
                    "rulesEngineId": {
                      "type": "string"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "frontEndEndpointName": "frontEndEndpoint",
                    "loadBalancingSettingsName": "loadBalancingSettings",
                    "healthProbeSettingsName": "healthProbeSettings",
                    "routingRuleName": "routingRule",
                    "backendPoolName": "backendPool"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/frontDoors",
                      "apiVersion": "2020-05-01",
                      "name": "[parameters('frontDoorName')]",
                      "location": "global",
                      "properties": {
                        "enabledState": "Enabled",
                        "frontendEndpoints": [
                          {
                            "name": "[variables('frontEndEndpointName')]",
                            "properties": {
                              "hostName": "[concat(parameters('frontDoorName'), '.azurefd.net')]",
                              "webApplicationFirewallPolicyLink": {
                                "id": "[parameters('wafPolicyId')]"
                              },
                              "sessionAffinityEnabledState": "Disabled"
                            }
                          }
                        ],
                        "loadBalancingSettings": [
                          {
                            "name": "[variables('loadBalancingSettingsName')]",
                            "properties": {
                              "sampleSize": 4,
                              "successfulSamplesRequired": 2
                            }
                          }
                        ],
                        "healthProbeSettings": [
                          {
                            "name": "[variables('healthProbeSettingsName')]",
                            "properties": {
                              "path": "/",
                              "protocol": "Https",
                              "healthProbeMethod": "GET",
                              "intervalInSeconds": 120
                            }
                          }
                        ],
                        "backendPools": [
                          {
                            "name": "[variables('backendPoolName')]",
                            "properties": {
                              "backends": [
                                {
                                  "address": "[parameters('backendAddress')]",
                                  "backendHostHeader": "[parameters('backendAddress')]",
                                  "httpPort": 80,
                                  "httpsPort": 443,
                                  "weight": 50,
                                  "priority": 1,
                                  "enabledState": "Enabled"
                                }
                              ],
                              "loadBalancingSettings": {
                                "id": "[resourceId('Microsoft.Network/frontDoors/loadBalancingSettings', parameters('frontDoorName'), variables('loadBalancingSettingsName'))]"
                              },
                              "healthProbeSettings": {
                                "id": "[resourceId('Microsoft.Network/frontDoors/healthProbeSettings', parameters('frontDoorName'), variables('healthProbeSettingsName'))]"
                              }
                            }
                          }
                        ],
                        "routingRules": [
                          {
                            "name": "[variables('routingRuleName')]",
                            "properties": {
                              "frontendEndpoints": [
                                {
                                  "id": "[resourceId('Microsoft.Network/frontDoors/frontEndEndpoints', parameters('frontDoorName'), variables('frontEndEndpointName'))]"
                                }
                              ],
                              "acceptedProtocols": [
                                "Https"
                              ],
                              "patternsToMatch": [
                                "/*"
                              ],
                              "routeConfiguration": {
                                "@odata.type": "#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration",
                                "forwardingProtocol": "HttpsOnly",
                                "backendPool": {
                                  "id": "[resourceId('Microsoft.Network/frontDoors/backEndPools', parameters('frontDoorName'), variables('backendPoolName'))]"
                                }
                              },
                              "rulesEngine": "[if(not(equals(parameters('rulesEngineId'), '')), createObject('id', parameters('rulesEngineId')), null())]",
                              "enabledState": "Enabled"
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/FrontDoorWebApplicationFirewallPolicies', variables('wafPolicyName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2019-10-01",
              "name": "front-door-deployment-2",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "frontDoorName": {
                    "value": "[parameters('frontDoorName')]"
                  },
                  "backendAddress": {
                    "value": "[parameters('backendAddress')]"
                  },
                  "wafPolicyId": {
                    "value": "[resourceId('Microsoft.Network/FrontDoorWebApplicationFirewallPolicies', variables('wafPolicyName'))]"
                  },
                  "rulesEngineId": {
                    "value": "[resourceId('Microsoft.Network/frontDoors/rulesEngines', split(format('{0}/{1}', parameters('frontDoorName'), variables('rulesEngineName')), '/')[0], split(format('{0}/{1}', parameters('frontDoorName'), variables('rulesEngineName')), '/')[1])]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "frontDoorName": {
                      "type": "string"
                    },
                    "backendAddress": {
                      "type": "string"
                    },
                    "wafPolicyId": {
                      "type": "string"
                    },
                    "rulesEngineId": {
                      "type": "string"
                    }
                  },
                  "functions": [],
                  "variables": {
                    "frontEndEndpointName": "frontEndEndpoint",
                    "loadBalancingSettingsName": "loadBalancingSettings",
                    "healthProbeSettingsName": "healthProbeSettings",
                    "routingRuleName": "routingRule",
                    "backendPoolName": "backendPool"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/frontDoors",
                      "apiVersion": "2020-05-01",
                      "name": "[parameters('frontDoorName')]",
                      "location": "global",
                      "properties": {
                        "enabledState": "Enabled",
                        "frontendEndpoints": [
                          {
                            "name": "[variables('frontEndEndpointName')]",
                            "properties": {
                              "hostName": "[concat(parameters('frontDoorName'), '.azurefd.net')]",
                              "webApplicationFirewallPolicyLink": {
                                "id": "[parameters('wafPolicyId')]"
                              },
                              "sessionAffinityEnabledState": "Disabled"
                            }
                          }
                        ],
                        "loadBalancingSettings": [
                          {
                            "name": "[variables('loadBalancingSettingsName')]",
                            "properties": {
                              "sampleSize": 4,
                              "successfulSamplesRequired": 2
                            }
                          }
                        ],
                        "healthProbeSettings": [
                          {
                            "name": "[variables('healthProbeSettingsName')]",
                            "properties": {
                              "path": "/",
                              "protocol": "Https",
                              "healthProbeMethod": "GET",
                              "intervalInSeconds": 120
                            }
                          }
                        ],
                        "backendPools": [
                          {
                            "name": "[variables('backendPoolName')]",
                            "properties": {
                              "backends": [
                                {
                                  "address": "[parameters('backendAddress')]",
                                  "backendHostHeader": "[parameters('backendAddress')]",
                                  "httpPort": 80,
                                  "httpsPort": 443,
                                  "weight": 50,
                                  "priority": 1,
                                  "enabledState": "Enabled"
                                }
                              ],
                              "loadBalancingSettings": {
                                "id": "[resourceId('Microsoft.Network/frontDoors/loadBalancingSettings', parameters('frontDoorName'), variables('loadBalancingSettingsName'))]"
                              },
                              "healthProbeSettings": {
                                "id": "[resourceId('Microsoft.Network/frontDoors/healthProbeSettings', parameters('frontDoorName'), variables('healthProbeSettingsName'))]"
                              }
                            }
                          }
                        ],
                        "routingRules": [
                          {
                            "name": "[variables('routingRuleName')]",
                            "properties": {
                              "frontendEndpoints": [
                                {
                                  "id": "[resourceId('Microsoft.Network/frontDoors/frontEndEndpoints', parameters('frontDoorName'), variables('frontEndEndpointName'))]"
                                }
                              ],
                              "acceptedProtocols": [
                                "Https"
                              ],
                              "patternsToMatch": [
                                "/*"
                              ],
                              "routeConfiguration": {
                                "@odata.type": "#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration",
                                "forwardingProtocol": "HttpsOnly",
                                "backendPool": {
                                  "id": "[resourceId('Microsoft.Network/frontDoors/backEndPools', parameters('frontDoorName'), variables('backendPoolName'))]"
                                }
                              },
                              "rulesEngine": "[if(not(equals(parameters('rulesEngineId'), '')), createObject('id', parameters('rulesEngineId')), null())]",
                              "enabledState": "Enabled"
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/frontDoors/rulesEngines', split(format('{0}/{1}', parameters('frontDoorName'), variables('rulesEngineName')), '/')[0], split(format('{0}/{1}', parameters('frontDoorName'), variables('rulesEngineName')), '/')[1])]",
                "[resourceId('Microsoft.Network/FrontDoorWebApplicationFirewallPolicies', variables('wafPolicyName'))]"
              ]
            }
          ],
          "outputs": {
            "frontDoorHostName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/frontDoors', parameters('frontDoorName')), '2020-05-01').frontendEndpoints[0].properties.hostName]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(resourceGroup().id, 'Microsoft.Resources/deployments', 'functionapp')]"
      ]
    }
  ],
  "outputs": {
    "functionUrl": {
      "type": "string",
      "value": "[format('https://{0}/api/{1}', reference(extensionResourceId(resourceGroup().id, 'Microsoft.Resources/deployments', 'front-door'), '2019-10-01').outputs.frontDoorHostName.value, reference(extensionResourceId(resourceGroup().id, 'Microsoft.Resources/deployments', 'functionapp'), '2019-10-01').outputs.functionName.value)]"
    }
  }
}